#ifndef INTERPRETER_H
#define INTERPRETER_H

#include <string>

#include "value.h"
#include "node.h"
#include "env.h"

namespace eris {
    // Walks over the abstract syntax tree generated by the parser
    class Interpreter {
    private:
        std::string filename{};
        Env global_env;
        void check_operand_type(const Value& val, ValueType type, std::size_t line) const;
    public:
        Interpreter(const std::string& filename); 
        Value visit(Node* node);
        Value visit(NumberNode* node);
        Value visit(StringNode* node);
        Value visit(IdentifierNode* node);
        Value visit(NullNode* node);
        Value visit(TrueNode* node);
        Value visit(FalseNode* node);
        Value visit(UnaryNode* node);
        Value visit(BinaryNode* node);
        Value visit(VarDeclNode* node);
        Value visit(ProgramNode* node);
    };
} // namespace eris

#endif // INTERPRETER_H