list = "[", [ expr, { ",", expr} ], "]";
key value = expr, ":", expr;
hash map = "{", { key value }, "}";
basic expr = int | float | string | identifier | "(", expr, ")";
call expr = basic expr, { "(", { expr }, ")" };
unary expr = { "+" | "-" | "!" }, call expr;
mul expr = basic expr, { "*", basic expr };
div expr = mul expr, { "/", mul expr };
mod expr = div expr, { "%", div expr };
add expr = mod expr, { "+", mod expr };
sub expr = add expr, { "-", add expr };
shl expr = sub expr, { ">>", sub expr };
shr expr = shl expr, { "<<", shl expr };
lt expr = shr expr, { "<", shr expr };
le expr = lt expr, { "<=", lt expr };
gt expr = le expr, { ">", le expr };
ge expr = gt expr, { ">=", gt expr };
eq expr = ge expr, { "==", ge expr };
ne expr = eq expr, { "!=", eq expr };
expr stmt = expr, ";";
var decl stmt = "var", identifier, "=", expr, ";";
var assign stmt = identifier, "=", expr, ";";
block stmt = "{", program, "}";
stmt = var decl stmt | var assign stmt | block stmt;
program = { stmt };